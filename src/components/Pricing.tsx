import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useToast } from "@/hooks/use-toast";
import { useLeadSubmission } from "@/hooks/useAPI";
import PaymentModal from "@/components/PaymentModal";
import { 
  Check, 
  Crown, 
  Star, 
  Clock, 
  Users, 
  BookOpen,
  Headphones,
  Award,
  Smartphone
} from "lucide-react";

const Pricing = () => {
  const [selectedPlan, setSelectedPlan] = useState("premium");
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  const [phone, setPhone] = useState("");
  const [showPaymentModal, setShowPaymentModal] = useState(false);
  const { toast } = useToast();
  const { 
    submitLead, 
    isSubmitting, 
    success, 
    error,
    resetState 
  } = useLeadSubmission();

  const plans = [
    {
      id: "basic",
      name: "Basic",
      price: "299,000",
      originalPrice: "599,000",
      duration: "/ th√°ng",
      popular: false,
      description: "Ph√π h·ª£p cho ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu",
      features: [
        "50+ b√†i h·ªçc c∆° b·∫£n",
        "AI tutor h·ªó tr·ª£ 24/7", 
        "Luy·ªán ph√°t √¢m v·ªõi AI",
        "·ª®ng d·ª•ng mobile",
        "Ch·ª©ng ch·ªâ ho√†n th√†nh",
        "H·ªó tr·ª£ qua chat"
      ],
      color: "border-border"
    },
    {
      id: "premium",
      name: "Premium",
      price: "599,000",
      originalPrice: "1,199,000",
      duration: "/ th√°ng",
      popular: true,
      description: "Ph·ªï bi·∫øn nh·∫•t - To√†n b·ªô t√≠nh nƒÉng",
      features: [
        "200+ b√†i h·ªçc chuy√™n s√¢u",
        "Live class h√†ng ng√†y",
        "1-on-1 v·ªõi gi√°o vi√™n b·∫£n x·ª©",
        "L·ªô tr√¨nh c√° nh√¢n h√≥a AI",
        "C·ªông ƒë·ªìng h·ªçc vi√™n VIP",
        "T√†i li·ªáu Business English",
        "Mock interview IELTS/TOEIC",
        "H·ªó tr·ª£ ∆∞u ti√™n 24/7"
      ],
      color: "border-primary shadow-medium"
    },
    {
      id: "enterprise",
      name: "Enterprise",
      price: "999,000", 
      originalPrice: "1,999,000",
      duration: "/ th√°ng",
      popular: false,
      description: "D√†nh cho doanh nghi·ªáp v√† team",
      features: [
        "T·∫•t c·∫£ t√≠nh nƒÉng Premium",
        "Training cho team (5-50 ng∆∞·ªùi)",
        "Customized curriculum",
        "Dedicated account manager",
        "Progress tracking dashboard",
        "Monthly performance report",
        "On-site training session",
        "24/7 premium support"
      ],
      color: "border-accent"
    }
  ];

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!email || !name || !phone) {
      toast({
        title: "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin",
        description: "T·∫•t c·∫£ c√°c tr∆∞·ªùng ƒë·ªÅu b·∫Øt bu·ªôc",
        variant: "destructive"
      });
      return;
    }

    try {
      // Reset any previous state
      resetState();
      
      // Submit lead via API
      await submitLead({
        name,
        email, 
        phone,
        selected_plan: selectedPlan,
      });

      // Show payment modal after successful lead submission
      setShowPaymentModal(true);
      
    } catch (error) {
      // Error already handled by the hook
      console.error('Form submission error:', error);
    }
  };

  return (
    <section id="pricing" className="py-20 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <Badge className="mb-6 bg-accent/10 text-accent border-accent/20">
            üí∞ ∆Øu ƒë√£i c√≥ h·∫°n - Gi·∫£m 50%
          </Badge>
          <h2 className="text-4xl md:text-5xl font-bold mb-4 text-foreground">
            Ch·ªçn G√≥i H·ªçc Ph√π H·ª£p
          </h2>
          <p className="text-xl text-muted-foreground max-w-3xl mx-auto">
            ƒê·∫ßu t∆∞ cho t∆∞∆°ng lai c·ªßa b·∫°n v·ªõi m·ª©c ph√≠ h·ª£p l√Ω nh·∫•t th·ªã tr∆∞·ªùng
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          {plans.map((plan) => (
            <Card 
              key={plan.id}
              className={`relative cursor-pointer transition-smooth hover:shadow-medium ${plan.color} ${
                plan.popular ? 'scale-105 z-10' : ''
              } ${selectedPlan === plan.id ? 'ring-2 ring-primary' : ''}`}
              onClick={() => setSelectedPlan(plan.id)}
            >
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <Badge className="bg-primary text-primary-foreground px-4 py-1">
                    <Crown className="w-4 h-4 mr-1" />
                    Ph·ªï bi·∫øn nh·∫•t
                  </Badge>
                </div>
              )}

              <CardHeader className="text-center pb-4">
                <CardTitle className="text-2xl font-bold">{plan.name}</CardTitle>
                <p className="text-muted-foreground">{plan.description}</p>
                
                <div className="mt-4">
                  <div className="flex items-baseline justify-center gap-2">
                    <span className="text-4xl font-bold text-primary">
                      {plan.price}ƒë
                    </span>
                    <span className="text-lg text-muted-foreground">
                      {plan.duration}
                    </span>
                  </div>
                  <div className="text-sm text-muted-foreground line-through mt-1">
                    {plan.originalPrice}ƒë
                  </div>
                  <Badge className="mt-2 bg-success/10 text-success border-success/20">
                    Ti·∫øt ki·ªám 50%
                  </Badge>
                </div>
              </CardHeader>

              <CardContent>
                <ul className="space-y-3">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-center gap-3">
                      <Check className="w-5 h-5 text-success flex-shrink-0" />
                      <span className="text-sm">{feature}</span>
                    </li>
                  ))}
                </ul>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Registration Form */}
        <div className="max-w-2xl mx-auto">
          <Card className="shadow-strong border-primary/20">
            <CardHeader className="text-center">
              <div className="mb-4">
                <Badge className="bg-accent text-accent-foreground">
                  üéÅ H·ªçc th·ª≠ mi·ªÖn ph√≠ 7 ng√†y
                </Badge>
              </div>
              <CardTitle className="text-3xl font-bold text-primary">
                ƒêƒÉng K√Ω Ngay H√¥m Nay
              </CardTitle>
              <p className="text-muted-foreground">
                Nh·∫≠p th√¥ng tin ƒë·ªÉ nh·∫≠n ngay 7 ng√†y h·ªçc th·ª≠ mi·ªÖn ph√≠
              </p>
            </CardHeader>

            <CardContent>
              <form onSubmit={handleSubmit} className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="name">H·ªç v√† t√™n *</Label>
                    <Input
                      id="name"
                      type="text"
                      placeholder="Nguy·ªÖn VƒÉn A"
                      value={name}
                      onChange={(e) => setName(e.target.value)}
                      className="mt-2"
                      required
                    />
                  </div>
                  <div>
                    <Label htmlFor="phone">S·ªë ƒëi·ªán tho·∫°i *</Label>
                    <Input
                      id="phone"
                      type="tel"
                      placeholder="0901234567"
                      value={phone}
                      onChange={(e) => setPhone(e.target.value)}
                      className="mt-2"
                      required
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="email">Email *</Label>
                  <Input
                    id="email"
                    type="email"
                    placeholder="example@gmail.com"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    className="mt-2"
                    required
                  />
                </div>

                <div className="bg-muted/50 p-4 rounded-lg">
                  <h4 className="font-semibold mb-2">G√≥i ƒë√£ ch·ªçn: {plans.find(p => p.id === selectedPlan)?.name}</h4>
                  <p className="text-sm text-muted-foreground">
                    B·∫°n c√≥ th·ªÉ thay ƒë·ªïi g√≥i h·ªçc sau khi ƒëƒÉng k√Ω
                  </p>
                </div>

                <Button 
                  type="submit" 
                  className="w-full bg-accent hover:bg-accent-hover text-accent-foreground font-semibold py-3 text-lg shadow-medium transition-smooth transform hover:scale-105"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "üöÄ B·∫Øt ƒê·∫ßu H·ªçc Th·ª≠ Mi·ªÖn Ph√≠"}
                </Button>

                <p className="text-sm text-center text-muted-foreground">
                  Cam k·∫øt kh√¥ng spam. B·∫°n c√≥ th·ªÉ h·ªßy ƒëƒÉng k√Ω b·∫•t c·ª© l√∫c n√†o.
                </p>
              </form>
            </CardContent>
          </Card>
        </div>

        {/* Trust indicators */}
        <div className="mt-16 text-center">
          <div className="flex flex-wrap justify-center items-center gap-8 text-muted-foreground">
            <div className="flex items-center gap-2">
              <Star className="w-5 h-5 text-yellow-400" />
              <span>ƒê√°nh gi√° 4.9/5</span>
            </div>
            <div className="flex items-center gap-2">
              <Users className="w-5 h-5" />
              <span>10,000+ h·ªçc vi√™n</span>
            </div>
            <div className="flex items-center gap-2">
              <Award className="w-5 h-5" />
              <span>Ch·ª©ng ch·ªâ qu·ªëc t·∫ø</span>
            </div>
            <div className="flex items-center gap-2">
              <Clock className="w-5 h-5" />
              <span>H·ªó tr·ª£ 24/7</span>
            </div>
          </div>
        </div>

        {/* Payment Modal */}
        <PaymentModal
          isOpen={showPaymentModal}
          onClose={() => {
            setShowPaymentModal(false);
            // Reset form after payment modal closes
            setEmail("");
            setName("");
            setPhone("");
          }}
          selectedPlan={plans.find(p => p.id === selectedPlan) || plans[1]}
          leadData={{ name, email, phone }}
        />
      </div>
    </section>
  );
};

export default Pricing;